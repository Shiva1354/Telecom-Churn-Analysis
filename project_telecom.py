# -*- coding: utf-8 -*-
"""Project telecom.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uhSS-h_Ld2RnntDv3Mp02OItNR62AhAI
"""

from google.colab import files
upload = files.upload ()

import pandas as pd
df = pd.read_csv("/content/WA_Fn-UseC_-Telco-Customer-Churn.csv")
df.head()

df.info()
df.describe()
df.isnull().sum()

df = df.drop("customerID", axis=1)

df.isnull().sum()

df["TotalCharges"] = pd.to_numeric(df["TotalCharges"], errors='coerce')
df["TotalCharges"].fillna(df["TotalCharges"].median(), inplace=True)

df.replace({'Yes':1, 'No':0}, inplace=True)

df['gender'] = df['gender'].map({'Male':1, 'Female':0})

df = pd.get_dummies(df, drop_first=True)

print(df.head())
print(df.info())

import matplotlib.pyplot as plt
import seaborn as sns

sns.countplot(x="Churn", data=df)
plt.title("Churn Distribution")
plt.show()

sns.countplot(x="Contract_Month-to-month", hue="Churn", data=df)
plt.title("Churn by Contract Type (Month-to-Month vs Others)")
plt.show()

df.columns

df_raw = pd.read_csv("WA_Fn-UseC_-Telco-Customer-Churn.csv")

sns.countplot(x="Contract", hue="Churn", data=df_raw)
plt.title("Churn by Contract Type")
plt.show()

sns.countplot(x="InternetService_Fiber optic", hue="Churn", data=df)
plt.title("Churn by Internet Service (Fiber vs Others)")
plt.show()

plt.figure(figsize=(8,5))
sns.boxplot(x="Churn", y="MonthlyCharges", data=df)
plt.title("Monthly Charges vs Churn")
plt.show()

plt.figure(figsize=(8,5))
sns.histplot(df[df['Churn']==1]['tenure'], color="red", kde=True, label="Churned")
sns.histplot(df[df['Churn']==0]['tenure'], color="green", kde=True, label="Stayed")
plt.legend()
plt.title("Tenure Distribution by Churn")
plt.show()

from sklearn.model_selection import train_test_split

X = df.drop("Churn", axis=1)
y = df["Churn"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix

log_model = LogisticRegression(max_iter=500)
log_model.fit(X_train, y_train)

y_pred_log = log_model.predict(X_test)

print("Logistic Regression Results")
print(confusion_matrix(y_test, y_pred_log))
print(classification_report(y_test, y_pred_log))

from sklearn.ensemble import RandomForestClassifier

rf_model = RandomForestClassifier(n_estimators=200, random_state=42)
rf_model.fit(X_train, y_train)

y_pred_rf = rf_model.predict(X_test)

print("Random Forest Results")
print(confusion_matrix(y_test, y_pred_rf))
print(classification_report(y_test, y_pred_rf))

!pip install shap
import shap

explainer = shap.TreeExplainer(rf_model)
shap_values = explainer.shap_values(X_test)

shap.summary_plot(shap_values[1], X_test)  # 1 = churn class

shap.summary_plot(shap_values[1], X_test.values, feature_names=X_test.columns)

explainer = shap.Explainer(rf_model, X_train)
shap_values = explainer(X_test)

shap.summary_plot(shap_values, X_test)

import shap

explainer = shap.TreeExplainer(rf_model)
shap_values = explainer.shap_values(X_test.to_numpy())

shap.summary_plot(shap_values, X_test, feature_names=X_test.columns)

explainer = shap.Explainer(rf_model, X_train)
shap_values = explainer(X_test)

shap.summary_plot(shap_values, X_test)

import matplotlib.pyplot as plt
import numpy as np

# Get feature importance from Random Forest
importances = rf_model.feature_importances_
indices = np.argsort(importances)[::-1]

# Plot top 15 features
plt.figure(figsize=(10,6))
plt.title("Top 15 Features Driving Churn")
plt.bar(range(15), importances[indices][:15], align="center")
plt.xticks(range(15), [X.columns[i] for i in indices[:15]], rotation=90)
plt.show()

# Full cleaned dataset
df.to_csv("/content/WA_Fn-UseC_-Telco-Customer-Churn.csv", index=False)

# Predictions with actual churn
df_results = X_test.copy()
df_results["Actual_Churn"] = y_test.values
df_results["Predicted_Churn"] = y_pred_rf
df_results.to_csv("telecom_results.csv", index=False)